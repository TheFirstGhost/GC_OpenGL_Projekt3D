#version 450 core
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec4 vertexColor;

// Values that stay constant for the whole mesh.
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;

uniform float myTime;

//Output variables
out vec3 fNormal;
out vec3 fPosition;
out vec3 fLight;
out vec3 vColor;

void main(){
	
	mat4 MV = V * M;
	
	mat4 MVP = P * V * M;
	//Transform position and normal to camera space fragment shader for lighting 
	vec4 positionHom = MV * vec4(vertexPosition_modelspace,1.0);
	fPosition = positionHom.xyz;
	mat4 normalMatix = transpose(inverse(MV));
	vec4 normalHom = normalMatix * vec4(vertexNormal_modelspace,1.0);
	fNormal = normalHom.xyz;
	vec4 lightHom = normalMatix * vec4(3.0,3.0,3.0,1.0);
	fLight = lightHom.xyz;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	if(vertexColor[3] > 0.0){
		vColor.r = vertexColor.r * abs(sin(myTime*(vertexColor[3]*10)));
		vColor.g = vertexColor.g * abs(sin(myTime*(vertexColor[3]*10)+1.047));
		vColor.b = vertexColor.b * abs(sin(myTime*(vertexColor[3]*10)-1.047));
	}
	else{
		vColor = vertexColor.rgb;
	}
	
	// UV of the vertex. No special space for this one.
	//UV = vertexUV;
}

